#include <string>
#include <sstream>
#include <vector>
#include <boost/serialization/base_object.hpp>
#include <boost/mpi.hpp>
#include <iostream>

#ifdef GUI
#include "mainwindow.h"
#include <QApplication>
#endif

#include "BeepHive.h"
#include "BeepHiveConfigs.h"
#include "World.h"
#include "Communicator.h"
#include "CentralCommunicator.h"
#include "FileCommunicator.h"

namespace mpi=boost::mpi;



int main(int argc, char** argv)
{
  mpi::environment env;
  mpi::communicator comm;
  int rank=comm.rank();

  BeepHiveConfigs& configs=BeepHiveConfigs::getInstance();
  configs.initialize(argc,argv);

#ifdef GUI
  //std::stringstream file_name;
  //file_name << "out_" << rank;
  //Communicators::getInstance().addCommunicator("file",new FileCommunicator(
  Communicators::getInstance().addCommunicator("central",new CentralCommunicator());
#endif
  if(rank==0){
#ifdef GUI
    if(configs.guiEnabled()){
      QApplication a(argc, argv);
      MainWindow w;
      w.show();
      return a.exec();
    }else{
#endif
      DEBUG("I am the GUI!");
      std::vector<std::string> updates;
      bool run=true;
      while(run){
        comm.barrier();

        //Receive messages from each process
        std::string send;
        gather(comm,send,updates,0);
        for(size_t i=1;i<updates.size();++i){
          std::cout << "Rank " << i << " sent: " << updates[i] << std::endl;
          if(updates[i] == "exit"){
            run=false;
          }

        }

        /*
         * Send updates uniformly to all processes
         * Messages from GUI should be short because they are generated by user
         * input. However, we don't have MPI3 instant collectives which would be
         * required to implement an algorithm that only sends to specific
         * processes
         */
        send="Hi I'm root!";
        broadcast(comm,send,0);

        sleep(1);
      }

      DEBUG("Exiting frontend");
#ifdef GUI
    }
    return 0;
#endif
  }else{
    World world;
    world.start();
    DEBUG("Exiting backend");
    return 0;
  }

  DEBUG("This should never print. Either gui or back-end should have returned");
  return 0;
}


